@page "/students"
@inject TeacherPro.Services.StudentService StudentService
@inject DialogService DialogService;
@inject NotificationService NotificationService

@using TeacherPro.Models;

<PageTitle>Studenci</PageTitle>

<h1>Studenci</h1>

<RadzenButton Text="Dodej studenta" Click=@InsertNewStudent Disabled=@CreateDisabled></RadzenButton>

<RadzenDataGrid
    TItem="Student"
    Data="@students"
    IsLoading=@isLoading
    AllowFiltering="true"
    AllowSorting="true"
    FilterMode="FilterMode.Advanced"
    LogicalFilterOperator="LogicalFilterOperator.And"
    AllowColumnResize="true"
    ColumnWidth="300px"
    AllowAlternatingRows="false"
    AllowPaging="true"
    PageSize="20"
    ShowPagingSummary="true"
    PagerHorizontalAlign="HorizontalAlign.Left"
    RowUpdate=@Update
    RowCreate=@Create
    Filter=@Reset
    Sort=@Reset
    Page=@Reset
    @ref="_grid"
>
    <Columns>
        <RadzenDataGridColumn TItem="Student" Property="Id" Title="ID" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Student" Property="FirstName" Title="Imię">
            <EditTemplate Context="student">
                <RadzenTextBox @bind-Value=@student.FirstName Name="FirstName" Style="width: 100%; display: block" />
                <RadzenRequiredValidator Component="FirstName" Text="Imię jest wymagane" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Student" Property="LastName" Title="Nazwisko">
            <EditTemplate Context="student">
                <RadzenTextBox @bind-Value=@student.LastName Name="LastName" Style="width: 100%; display: block" />
                <RadzenRequiredValidator Component="LastName" Text="Nazwisko jest wymagane" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Student" Property="StudentNumber" Title="Numer Albumu">
            <EditTemplate Context="student">
                <RadzenTextBox @bind-Value=@student.StudentNumber Name="StudentNumber" Style="width: 100%; display: block" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Student" Width="100px" Title="Akcje" Frozen="true" TextAlign="TextAlign.Center">
            <Template Context="student">
                <RadzenButton Click=@(() => Edit(student)) ButtonStyle="ButtonStyle.Warning" Icon="edit"></RadzenButton>
                <RadzenButton Click=@(() => DeleteStudent(student)) ButtonStyle="ButtonStyle.Danger" Icon="delete"></RadzenButton>
            </Template>
            <EditTemplate Context="student">
                <RadzenButton Click=@(() => SaveEdit(student)) ButtonStyle="ButtonStyle.Success" Icon="check"></RadzenButton>
                <RadzenButton Click=@(() => CancelEdit(student)) ButtonStyle="ButtonStyle.Warning" Icon="close"></RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    IEnumerable<Student> students = null!;
    RadzenDataGrid<Student>? _grid;
    RadzenDataGrid<Student> grid => _grid!;

    bool isLoading = false;

    Student? studentToInsert;
    bool CreateDisabled => studentToInsert != null;

    HashSet<Student> editingStudents = new();

    protected override void OnInitialized()
    {
        students = StudentService.GetStudents();
    }

    private void Reset()
    {
        if (studentToInsert != null)
        {
            grid.CancelEditRow(studentToInsert);
            studentToInsert = null;
        }

        if (editingStudents.Count() > 0)
        {
            foreach(var studentEdit in editingStudents)
            {
                grid.CancelEditRow(studentEdit);
            }
            editingStudents.Clear();
        }
    }

    private void InsertNewStudent()
    {
        if (studentToInsert != null)
        {
            return;
        }
        studentToInsert = new Student();
        grid.InsertRow(studentToInsert);
    }

    private async Task DeleteStudent(Student student)
    {
        var confirm = await Confirm("Usuwanie studenta", $"Czy na pewno chcesz usunąć studenta {student.FullName}?");
        if (!confirm)
        {
            return;
        }

        try {
            isLoading = true;
            await StudentService.DeleteStudent(student);
            NotificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Success,
                Summary = "Usunięto pomyślnie",
                Detail = $"Pomyślnie usunięto studenta {student.FullName}"
            });
            await grid.Reload();
        }
        catch(Exception ex) {
            NotificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Nie udało się usunąć",
                Detail = ex.Message
            });
        }
        finally {
            isLoading = false;
        }
    }

    void Edit(Student student)
    {
        // Edytowanie rekordu podczas dodawania jakiegoś zawsze go usuwa
        // Więc muszę go dać na null, żeby przycisk się odblokował.
        studentToInsert = null;
        editingStudents.Add(student);
        grid.EditRow(student);
    }

    void CancelEdit(Student student)
    {
        if (student == studentToInsert)
        {
            studentToInsert = null;
        }

        editingStudents.Remove(student);

        grid.CancelEditRow(student);
        StudentService.CancelChanges(student);
    }

    void SaveEdit(Student student)
    {
        if (student == studentToInsert)
        {
            studentToInsert = null;
        }
        grid.UpdateRow(student);
    }

    async Task Update(Student student)
    {
        try {
            isLoading = true;
            await StudentService.SaveChangesToDb();
            NotificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Success,
                Summary = "Zmodyfikowano studenta",
                Detail = $"Pomyślnie zmodyfikowano studenta {student.FullName}"
            });
        }
        catch (Exception ex) {
            NotificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Błąd podczas modyfikacji studenta",
                Detail = ex.Message
            });
        }
        finally {
            isLoading = false;
        }
    }

    private async void Create(Student student)
    {
        try {
            isLoading = true;
            await StudentService.AddStudent(student);
            NotificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Success,
                Summary = "Utworzono nowego studenta",
                Detail = $"Pomyślnie utworzono nowego studenta: {student.FullName}"
            });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage {
                Severity = NotificationSeverity.Error,
                Summary = "Błąd podczas tworzenia nowego studenta",
                Detail = ex.Message
            });
        }
        finally {
            isLoading = false;
        }
    }

    private async Task<bool> Confirm(string title, string text)
    {
        var res = await DialogService.Confirm(text, title, new ConfirmOptions {
            OkButtonText = "Tak",
            CancelButtonText = "Nie"
        });
        
        return res.HasValue ? res.Value : false;
    }
}